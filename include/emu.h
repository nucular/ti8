#ifndef EMU_H
#define EMU_H

#include <asmtypes.h>
#include <intr.h>

#define EMU_MEMSIZE 0xFFF
#define EMU_PROGSTART 0x200
#define EMU_PROGSIZE (EMU_MEMSIZE - EMU_PROGSTART)
#define EMU_STACKSIZE 16
#define EMU_REGCOUNT 16
#define EMU_REALISTIC

void emu_init();
void emu_exit();
void emu_cycle();
void emu_setpaused(BOOL paused);
DEFINE_INT_HANDLER(emu_int5);

const char emu_font[80] = {
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

BOOL emu_running;
BOOL emu_paused;
BOOL emu_stepthrough;
unsigned char *emu_mem;
unsigned char emu_reg[EMU_REGCOUNT];
unsigned char *emu_pc;
unsigned short emu_i;
unsigned char *emu_stack[EMU_STACKSIZE];
unsigned char emu_stack_top;
volatile unsigned char emu_delaytimer;
volatile unsigned char emu_soundtimer;
INT_HANDLER emu_old_int5;

#endif
